install.packages("C:/Users/Zheng Zhu/Downloads/bnlearn_3.6-20141014.tar", repos = NULL, type="source")
install.packages("C:/Users/Zheng Zhu/Downloads/bnlearn_3.6-20141014.tar.gz", repos = NULL, type="source")
install.packages("C:\\bnlearn_3.6-20141014.tar.gz", repos = NULL, type="source")
install.packages("C:\\bnlearn_3.6-20141014.tar.gz", type="source")
?install.packages
install.packages("C:\\zheng\\bnlearn_3.6-20141014.tar", type="source")
install.packages("C:\\zheng\\bnlearn_3.6-20141014.tar",repos = NULL, type="source")
remove.packages("bnlearn")
install.packages("C:\\zheng\\bnlearn_3.6-20141014.tar",repos = NULL, type="source")
install.packages("C:\\zheng\\bnlearn_3.6-20141014.tar.gz",repos = NULL, type="source")
install.packages("C:/zheng/bnlearn_3.6-20141014.tar.gz",repos = NULL, type="source")
install.packages("C:/zheng/bnlearn_3.6-20141014.tar.gz",repos = NULL, type="source")
install.packages(bnlearn)
install.packages("bnlearn")
install.packages("C:/zheng/bnlearn_3.6-20141014.tar.gz",repos = NULL, type="source")
Sys.getenv('PATH')
Sys.getenv('PATH')
system('g++ -v')
install.packages("C:/zheng/bnlearn_3.6-20141014.tar.gz",repos = NULL,type="source")
library(bnlearn)
require(knitr)
require(Rgraphviz)
data(marks)
str(marks)
head(marks)
ug = empty.graph(names(marks))
arcs(ug,ignore.cycles=TRUE) = matrix(c("MECH","VECT","MECH","ALG","VECT","MECH","VECT","ALG",
"ALG","MECH","ALG","VECT","ALG","ANL","ALG","STAT",
"ANL","ALG","ANL","STAT","STAT","ALG","STAT","ANL"),ncol=2,byrow=TRUE,dimnames=list(c(),c("from","to")))
ug
plot(ug)
dag = empty.graph(names(marks))
arcs(dag)=matrix(c("VECT","MECH","ALG","MECH","ALG","VECT","ANL","ALG","STAT","ALG","STAT","ANL"),
ncol=2,byrow=TRUE,dimnames=list(c(),c("from","to")))
plot(dag)
mat = matrix(c(0,1,1,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0),nrow=5,
dimnames=list(nodes(dag),nodes(dag)))
mat
dag2 = empty.graph(nodes(dag))
nodes(dag)
?amat
amat(dag2)=mat
all.equal(dag,dag2)
plot(dag2)
dag3= empty.graph(nodes(dag))
str(marks)
names(marks)
colnames(marks)
dag3= empty.graph(nodes(dag))
dag3 = set.arc(dag3,"VECT","MECH")
dag3 = set.arc(dag3,"ALG","MECH")
dag3 = set.arc(dag3,"ALG","VECT")
dag3 = set.arc(dag3,"ANL","ALG")
dag3 = set.arc(dag3,"STAT","ALG")
dag3 = set.arc(dag3,"STAT","ANL")
all.equal(dag3,dag)
all.equal(moral(dag3),ug)
plot(dag)
node.ordering(dag)
nbr(dag,"ANL")
chld = children(dag,"VECT")
par = parents(dag,"VECT")
chld
par
plot(dag)
o.par=sapply(chld,parents,x=dag)
o.par
score(dag,data=marks,type="loglik-g")
dag.eq = reverse.arc(dag,"STAT","ANL")
plot(dag.eq)
score(dag.eq,data=marks,type="loglik-g")
vstructs(dag)
vstructs(dag,moral=TRUE)
cpdag(dag)
?cpdag
dm<-cpdag(dag)
plot(dag2)
plot(dag)
plot(dm)
dag2 = drop.arc(dag,from="STAT",to="ANL")
plot(dag2)
hl2 = list(arcs=vstructs(dag2,arcs=TRUE),lwd=4,col="black")
graphviz.plot(dag2,highlight=hl2,layout="fdp",main="dag2")
bn.gs=gs(marks)
graphviz.plot(bn.gs)
bn.hc=hc(marks)
graphviz.plot(bn.hc)
bn.hc
score(bn.hc,data=marks,type="bic-g")
fitted = bn.fit(bn.hc,data=marks)
fitted
bn.gs
graphviz.plot(bn.gs)
dmarks = discretize(marks,breaks=2,method="interval")
head(marks)
head(dmarks)
bn.dgs=gs(dmarks)
bn.dhc=hc(dmarks)
all.equal(bn.dgs,bn.dhc)
data(learning.test)
str(learning.test)
bn.gs
graphviz.plot(bn.gs)
bn2<-iamb(learning.test)
bn3<-fast.iamb(learning.test)
bn4<-inter.iamb(learning.test)
bn.hc<-hc(learning.test,score="aic")
graphviz.plot(bn.hc)
graphviz.plot(bn.gs)
bn.hc<-hc(learning.test,score="aic")
graphviz.plot(bn.hc)
bn.AB<-gs(learning.test,blacklist=c("B","A"))
graphviz.plot(bn.AB)
graphviz.plot(bn.AB)
score(bn.AB,learning.test,type="bde")
bn.BA<-gs(learning.test,blacklist=c("A","B"))
graphviz.plot(bn.BA)
undirected.arcs(bn.gs)
graphviz.plot(bn.gs)
bn.dag<-set.arc(bn.gs,"A","B")
graphviz.plot(bn.dag)
other <- empty.graph(nodes = nodes(bn.hc))
alarm.gs<-gs(alarm)
alarm.gs
graphviz.plot(alarm.gs)
pdag = iamb(learning.test)
graphviz.plot(pdag)
dag = set.arc(pdag, from = "B", to = "A")
graphviz.plot(dag)
fit = bn.fit(dag, learning.test)
fit
fit$C
bn.fit.barchart(fit$A)
bn.fit.dotplot(fit$D)
data(gaussian.test)
pdag = iamb(gaussian.test)
graphviz.plot(pdag)
undirected.arcs(pdag)
dag = set.arc(pdag,"D","B")
graphviz.plot(dag)
fit = bn.fit(dag,gaussian.test)
head(gaussian.test)
fit
coefficients(fit$F)
bn.fit.qqplot(fit)
bn.fit.xyplot(fit)
bn.fit.histogram(fit)
pdag = iamb(learning.test)
dag = set.arc(pdag,from="A",to="B")
fit = bn.fit(dag,learning.test,method="bayes")
fit
head(gaussina.test)
head(gaussian.test)
?break
?cut
gaussian.test$G_bin<-cut(gaussian.test$G,4)
head(gaussian.test)
gt<-gaussian.test
gt[,-c("G")]
gt[,-7]
head(gt[,-7])
gt<-gt[,-7]
pdag<-iamb(gt)
graphviz.plot(pdag)
dag = set.arc(pdag,"D","B")
fit = bn.fit(dag,gaussian.test)
fit = bn.fit(dag,gt)
plot(dag)
bn.fit(dag,gt)
dag
pdag<-hc(gt)
plot(pdag)
bn.fit(pdag,gt)
?bn.fit
str(gt)
?custom.fit
data(learning.test)
head(learning.test)
res = gs(learning.test)
plot(res)
res = set.arc(res,"A","B")
fitted = bn.fit(res,learning.test)
fitted
bn.fit.barchart(fitted$A)
bn.fit.barchart(fitted$B)
fitted$A
fitted$B
new.cpt=matrix(c(0.1,0.2,0.3,0.2,0.5,0.6,0.7,0.3,0.1),byrow=TRUE,ncol=3,dimnames=list(B=c("a","b","c"),A=c("a","b","c")))
new.cpt
fitted$B<-as.table(new.cpt)
all.equal(res,bn.net(fitted))
res=hc(gaussian.test)
fitted = bn.fit(res,gaussian.test)
res
head(gaussian.test)
require(Rgraphviz)
require(bnlearn)
data(learning.test)
head(learning.test)
res = gs(learning.test)
plot(res)
res = set.arc(res,"A","B")
fitted = bn.fit(res,learning.test)
fitted$B
new.cpt = matrix(c(0.1, 0.2, 0.3, 0.2, 0.5, 0.6, 0.7, 0.3, 0.1),
byrow = TRUE, ncol = 3,
dimnames = list(B = c("a", "b", "c"), A = c("a", "b", "c")))
fitted$B=as.table(new.cpt)
fitted$B
all.equal(res,bn.net(fitted))
res = hc(gaussian.test)
fitted = bn.fit(res,gaussian.test)
fitted$F
head(gaussian.test)
fitted
plot(res)
res = gs(learning.test)
plot(res)
res = set.arc(res,"A","B")
plot(res)
fitted = bn.fit(res,learning.test)
fitted$B
fitted$F
res = hc(gaussian.test)
fitted = bn.fit(res,gaussian.test)
fitted$F = list(coef)
fitted$F = list(coef=c(1,2,3,4,5),sd=3)
fitted$F = lm(F~A+D+E+G,data=gaussian.test)
net = model2network("[A][B][C|A:B]")
cptA = matrix(c(0.4,0.6),ncol=2,dimnames=list(NULL,c("LOW","HIGH")))
cptB = matrix(c(0.8,0.2),ncol=2,dimnames=list(NULL,c("GOOD","BAD")))
cptC = c(0.5,0.5,0.4,0.6,0.3,0.7,0.2,0.8)
dim(cptC)=c(2,2,2)
dimnames(cptC)=list("C"=c("TRUE","FALSE"),"A"=c("LOW","HIGH"),"B"=c("GOOD","BAD"))
cfit=custom.fit(net,dist=list(A=cptA,B=cptB,C=cptC))
cfit
cfit=custom.fit(net,dist=list(A=cptA,B=cptB,C=cptC),ordinal=c("A","B"))
distA=list(coef=c("Intercept"=2),sd=1)
cfit=custom.fit(net,dist=list(A=distA,B=cptB,C=cptC),ordinal=c("A","B"))
distB=list(coef=c("Intercept"=1),sd=0.5)
distC=list(coef=c("Intercept"=0.5,"A"=0.75,"B"=1.32),sd=0.4)
cfit=custom.fit(net,dist=list(A=distA,B=distB,C=distC))
distA = list(coef = c("(Intercept)" = 2), sd = 1)
distB = list(coef = c("(Intercept)" = 1), sd = 1.5)
distC = list(coef = c("(Intercept)" = 0.5, "A" = 0.75, "B" = 1.32), sd = 0.4)
cfit = custom.fit(net, dist = list(A = distA, B = distB, C = distC))
cfit
cptA = matrix(c(0.4,0.6),ncol=2,dimnames=list(NULL,c("LOW","HIGH")))
distB = list(coef=c("(Intercept)"=1),sd=1.5)
distC=list(coef=matrix(c(1.2,2.3,3.4,4.5),ncol=2,dimnames=list(c("Intercept","B"),NULL)),sd=c(0.3,0.6))
distB
distC
cfit=custom.fit(net,dist=list(A=distA,B=distB,c=distC))
cfit=custom.fit(net,dist=list(A=distA,B=distB,C=distC))
cptA = matrix(c(0.4, 0.6), ncol = 2, dimnames = list(NULL, c("LOW", "HIGH")))
distB = list(coef = c("(Intercept)" = 1), sd = 1.5)
distC = list(coef = matrix(c(1.2, 2.3, 3.4, 4.5), ncol = 2,
dimnames = list(c("(Intercept)", "B"), NULL)),
sd = c(0.3, 0.6))
distC
cgfit = custom.fit(net, dist = list(A = cptA, B = distB, C = distC))
cgfit
cgfit
cpquery(net.data, (A=="LOW"), TRUE)
cpquery(cgfit, (A=="LOW"), TRUE)
cpquery(cgfit, (A=="HIGH"), TRUE)
cpquery(cgfit, (B==0), TRUE)
cpquery(cgfit, (B==2), TRUE)
?cpquery
cpdist(cgfit, (B==2), TRUE)
cpdist(cgfit, "B",(A=="LOW"))
distB
b<-cpdist(cgfit, "B",(A=="LOW"))
str(b)
head(b)
mean(b$B)
sd(b$B)
distC
c<-cpdist(cgfit, "C",(A=="LOW",B==0.9))
c<-cpdist(cgfit, "C",(A=="LOW",B=0.9))
c<-cpdist(cgfit, "C",c(A=="LOW",B==0.9))
c<-cpdist(cgfit, "C",(A=="LOW")&(B==0.9))
c
c<-cpdist(cgfit, "C",(A=="LOW")&((B>=0.9)&(B<=1.2)))
c
distC
c<-cpdist(cgfit, "C",(A=="LOW")&((B>=0.9)&(B<=1.1)))
c
distC
mean(c$C)
sd(c$C)
a<-cpdist(cgfit, "A",(B>=0.9)&(B<=1.1)&((C>=3.2)&(C<=3.8)))
a
table(a)
cpquery(cgfit, "A",(B>=0.9)&(B<=1.1)&((C>=3.2)&(C<=3.8)))
b1<-cpdist(cgfit, "B",(A=="LOW")&((C>=3.2)&(C<=3.8)))
b1
mean(b1$B)
sd(b1$B)
devtools::install_github("twitter/BreakoutDetection")
libray(breakout)r
library(breakout)
library(BreakoutDetection)
help(breakout)
data(Scribe)
Scribe
str(Scribe)
res = breakout(Scribe,min.size=24,method='multi',beta=0.001,degree=1,plot=TRUE)
res$plot
runApp()
getwd()
setwd("C:\\Projects\\BayesianNetwork\\Netscene")
require(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
hpi_model <- matrix(c(0.4, 0.6), ncol = 2, dimnames = list(NULL, c("LOW", "HIGH")))
hpi_model
names(hpi_model)
colnames(hpi_model)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
