)
FirstQuadrant <- setClass(
# Define the slots
slots = c(
x = "numeric",
y = "numeric"
),
# Set the default values for the slots. (optional)
prototype = list(
x = 0.0,
y = 0.0
),
validity = function(object){
if((object@x<0)||(object@y<0)){
return("A negative number for one of the coordinates was given")
}
return(TRUE)
}
)
FirstQuadrant <- setClass(
# Set the name for the class
"FirstQuadrant",
# Define the slots
slots = c(
x = "numeric",
y = "numeric"
),
# Set the default values for the slots. (optional)
prototype=list(
x = 0.0,
y = 0.0
),
# Make a function that can test to see if the data is consistent.
# This is not called if you have an initialize function defined!
validity=function(object)
{
if((object@x < 0) || (object@y < 0)) {
return("A negative number for one of the coordinates was given.")
}
return(TRUE)
}
)
FirstQuadrant <- setClass(
# Set the name for the class
"FirstQuadrant",
# Define the slots
slots = c(
x = "numeric",
y = "numeric"
),
# Set the default values for the slots. (optional)
prototype = list(
x = 0.0,
y = 0.0
),
validity = function(object){
if((object@x<0)||(object@y<0)){
return("A negative number for one of the coordinates was given")
}
return(TRUE)
}
)
x <- FirstQuadrant()
x@x
y  <- FirstQuadrant(x=5,y=7)
y@y
y
z <- FirstQuadrant(x=3,y=-2)
setGeneric(name="setCoordinate",
def=function(theObject,xVal,yVal){
standardGeneric("setCoordinate")
}
)
?setGeneric
setMethod(f="setCoordinate",
signature = "FirstQuadrant",
definition = function(theObject,xVal,yVal){
theObject@x <- xVal
theObject@y <- yVal
return(theObject)
}
)
z  <- FirstQuadrant(x=2.5,y=10)
z
z <- setCoordinate(z,-3.0,-5.0)
z
Agent <- setClass(
# Set the name for the class
"Agent",
# Define the slots
slots = c(
location = "numeric",
velocity = "numeric",
active = "logical"
),
# Set the default values for the slots.(optional)
prototype = list(
location = c(0.0,0.0),
active = TRUE,
velocity = c(0.0,0.0)
),
validity = function(object){
if(sum(object@velocity^2)>100.0){
return("The velocity level is out of bounds.")
}
return(TRUE)
}
)
a <- Agent()
a
is.object(a)
isS4(a)
slotNames(a)
slotNames("Agent")
getSlots("Agent")
s <- getSlots("Agent")
s
s[1]
s[[1]]
getClass(a)
getClass("Agent")
slot(a,"location")
a@location
setGeneric(name="setLocation",
def = function(theObject,position){
standardGeneric("setLocation")
}
)
setMethod(f="setLocation",
signature = "Agent"
definition = function(theObject,position){
theObject@location  <- position
validObject(theObject)
return(theObject)
}
)
setMethod(f="setLocation",
signature = "Agent",
definition = function(theObject,position){
theObject@location  <- position
validObject(theObject)
return(theObject)
}
)
setGeneric(name="getLocation",
def=function(theObject){
standardGeneric("getLocation")
}
)
setMethod(f="getLocation",
signature="Agent",
definition=function(theObject){
return(theObject@location)
}
)
setGeneric(name="SetActive",
def=function(theObject,active){
standardGeneric("SetActive")
}
)
setMethod(f="setActive",
signature="Agent",
definition=function(theObject,active){
theObject@active <- active
validObject(theObject)
return(theObject)
}
)
setGeneric(name="SetActive",
def=function(theObject,active){
standardGeneric("SetActive")
}
)
setMethod(f="setActive",
signature="Agent",
definition=function(theObject,active){
theObject@active <- active
validObject(theObject)
return(theObject)
}
)
setGeneric(name="setActive",
def=function(theObject,active){
standardGeneric("SetActive")
}
)
setGeneric(name="setActive",
def=function(theObject,active){
standardGeneric("setActive")
}
)
setMethod(f="setActive",
signature="Agent",
definition=function(theObject,active){
theObject@active <- active
validObject(theObject)
return(theObject)
}
)
setGeneric(name="getActive",
def=function(theObject){
return(theObject@active)
})
setGeneric(name="getActive",
def=function(theObject){
return(theObject@active)
})
setMethod(f="getActive",
signature="Agent",
definition=function(theObject){
return(theObject@active)
})
setGeneric(name="setVelocity",
def=function(theObject,velocity){
theObject@velocity <- velocity
validObject(theObject)
return(theObject)
})
setGeneric(name="setVelocity",
def=function(theObject,velocity){
standardGeneric("setVelocity")
})
setMethod(f="setVelocity",
signature="Agent",
definition=function(theObject,velocity){
theObject@velocity <- velocity
validObject(theObject)
return(theObject)
})
setGeneric(name="getVelocity",
def=functioni(theObject){
standardGeneric("getVelocity")
})
setGeneric(name="getVelocity",
def=function(theObject){
standardGeneric("getVelocity")
})
setMethod(f="getVelocity",
signature="Agent",
definition=function(theObject){
return(theObject@velocity)
})
a <- Agent()
getVelocity(a)
setVelocity(a,c(1,2))
a
a <- setVelocity(a,c(1,2))
a
setGeneric(name="resetActivity",
def=function(theObject,value){
standardGeneric("resetActivity")
})
setMethod(f="resetActivity",
signature=c("Agent","logical"),
definition = function(theObbject,value){
theObject <- setActive(theObject,value)
theObject <- setVelocity(theObject,c(0.0.0.0))
return(theObject)
}
)
setMethod(f="resetActivity",
signature=c("Agent","logical"),
definition = function(theObbject,value){
theObject <- setActive(theObject,value)
theObject <- setVelocity(theObject,c(0.0,0.0))
return(theObject)
}
)
setGeneric(name="resetActivity",
def=function(theObject,value){
standardGeneric("resetActivity")
})
setMethod(f="resetActivity",
signature=c("Agent","logical"),
definition = function(theObbject,value){
theObject <- setActive(theObject,value)
theObject <- setVelocity(theObject,c(0.0,0.0))
return(theObject)
}
)
setMethod(f="resetActivity",
signature=c("Agent","numeric"),
definition=function(theObject,value)
{
theObject <- setActive(theObject,TRUE)
theObject <- setVelocity(theObject,value)
return(theObject)
}
)
setMethod(f="resetActivity",
signature=c("Agent","logical"),
definition = function(theObject,value){
theObject <- setActive(theObject,value)
theObject <- setVelocity(theObject,c(0.0,0.0))
return(theObject)
}
)
setMethod(f="resetActivity",
signature=c("Agent","logical"),
definition = function(theObject,value){
theObject <- setActive(theObject,value)
theObject <- setVelocity(theObject,c(0.0,0.0))
return(theObject)
}
)
setMethod(f="resetActivity",
signature=c("Agent","numeric"),
definition=function(theObject,value)
{
theObject <- setActive(theObject,TRUE)
theObject <- setVelocity(theObject,value)
return(theObject)
}
)
a <- Agent()
a
a <- resetActivity(a,FALSE)
a
a <- resetActivity(a,c(1,3))
a
Prey <- setClass(
## Set the name for the class
"Prey",
## Define the slots - in this case it is empty...
slots = character(0),
#set the default values for the slots.(optional)
prototype = list(),
#Make a function that can test to see if the dagta is consistent.
#This is not called if you have an initialize function defined!
validity=function(object){
if(sum(object@velocity^2)>70.0){
return("The velocity level is out of bounds.")
}
return(TRUE)
},
contains = "Agent"
)
Lynx <- setClass(
"Lynx",
# Define the slots - in this case it is empty..
slots = character(0),
# Set the default value for the slots.
prototype=list(),
validity=function(object){
if(sum(object@velocity^2)>95.0){
return("The velocity level is out of bounds.")
}
return(TRUE)
},
# Set the inheritance for this class
contains = "Bobcat"
)
Bobcat <- setClass(
"Bobcat",
#Define the slots - in this case it is empty..
slots = character(0),
# Set the default values for the slots.(optiona)
prototype=list(),
# Make a function that can test to see if the data is consistent.
# This is not called if you have an initialize function defined!
validity=function(object){
if(sum(object@velocity^2)>85.0){
return("The velocity level is out of bounds")
}
return(TRUE)
},
contains="Agent"
)
Lynx <- setClass(
"Lynx",
# Define the slots - in this case it is empty..
slots = character(0),
# Set the default value for the slots.
prototype=list(),
validity=function(object){
if(sum(object@velocity^2)>95.0){
return("The velocity level is out of bounds.")
}
return(TRUE)
},
# Set the inheritance for this class
contains = "Bobcat"
)
setGeneric(name="move",
def=function(theObject){
standardGeneric("move")
})
setMethod(f="move",
signature="Agent",
definition=function(theObject){
print("Move the Agent dude")
theObject <- setVelocity(theObject,c(1,2))
validObject(theObject)
return(theObject)
}
)
setMethod(f="move",
signature="Bobcat",
definition=function(theObject){
print("Check this Bobcat before moving this dude")
theObject <- setLocation(theObject,c(2,3))
theObject <- callNextMethod(theObject)
print("Move this Bobcat dude")
validObject(theObject)
return(theObject)
}
)
setMethod(f="move",
signature="Lynx",
definition=function(theObject){
print("Check this Lynx before moving this dude")
theObject <- setActive(theObject, FALSE)
theObject <- callNextMethod(theObject)
print("Move this Lynx dude")
validObject(theObject)
return(theObject)
}
)
?callNextMethod
robert <- Bobcat()
robert
robert <- move(robert)
robert
lionel <- Lynx()
lionel
lionel <- move(lionel)
lionel
setClass("Person",representation(name="character",age="numeric"))
setClass("Employee",representation(boss="Person"),contains="Person")
hadley <- new("Person",name="Hadley",age=31)
hadley
setClass("Person",representation(name="character",age="numeric"),
prototype(name=NA_character_,age=NA_real_))
hadley <- new("Person",name="Hadley")
slot(hadley,age)
slot(hadley,"age")
getSlots(hadley)
getSlots("Person")
length(1343)
length('hadley')
str_length('hadley')
check_person <- function(object){
errors <- character()
length_age <- length(object@age)
if(length_age!=1){
msg <- paste("Age is length ",length_age, ". Should be 1",sep="")
errors <- c(errors,msg)
}
length_name <- length(object@name)
if(length_name!=1){
msg <- paste("Name is length ",length_name,". Should be 1",sep="")
errors <- c(errors,msg)
}
if(length(errors)==0) TRUE else errors
}
setClass("Person",representation(name="character",age="numeric"),validity=check_person)
new("Person",name="Hadley")
hadley <- new("Person",name="Hadley",age=31)
hadley@age <- 1:10
validObject(hadley)
sides <- function(object) 0
setGeneric("sides")
sides
setGeneric("sides",function(object){
standardGeneric("sides")
})
setClass("Shape")
setClass("Polygon", representation(sides = "integer"), contains = "Shape")
setMethod("sides",signature(object="Polygon"),function(object){
object@sides
})
setClass("Triangle", contains = "Polygon")
setClass("Square", contains = "Polygon")
setClass("Circle", contains = "Shape")
setMethod("sides",signature("Triangle"),function(object) 3)
setMethod("sides",signature("Square"),function(object) 4)
setMethod("sides",signature("Circle"),function(object) Inf)
showMethods("sides")
setClass("A")
setClass("A1", contains = "A")
setClass("A2", contains = "A1")
setClass("A3", contains = "A2")
setGeneric("foo", function(a, b) standardGeneric("foo"))
setMethod("foo", signature("A1", "A2"), function(a, b) "1-2")
setMethod("foo", signature("A2", "A1"), function(a, b) "2-1")
foo(new("A2"),new("A2"))
?trunc
trunc(9.7)
trunc(9.2)
library(ggplot2)
diamonds
library(dplyr)
tbl_df(diamonds)
view(iris)
View(iris)
diamonds$x  %>% mean()
library(devtools)
devtools::install_github("rstudio/EDAWR")
library(EDAWR)
?storms
?pollution
head(storms)
library(tidyr)
?gather
?spread
cases
gather(cases,"year","n",2:4)
devtools::install_github("hadley/tidyr")
library(tidyr)
gather(cases,"year","n",2:4)
?gather
?gather
