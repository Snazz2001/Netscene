alarm.gs<-gs(alarm)
alarm.gs
graphviz.plot(alarm.gs)
pdag = iamb(learning.test)
graphviz.plot(pdag)
dag = set.arc(pdag, from = "B", to = "A")
graphviz.plot(dag)
fit = bn.fit(dag, learning.test)
fit
fit$C
bn.fit.barchart(fit$A)
bn.fit.dotplot(fit$D)
data(gaussian.test)
pdag = iamb(gaussian.test)
graphviz.plot(pdag)
undirected.arcs(pdag)
dag = set.arc(pdag,"D","B")
graphviz.plot(dag)
fit = bn.fit(dag,gaussian.test)
head(gaussian.test)
fit
coefficients(fit$F)
bn.fit.qqplot(fit)
bn.fit.xyplot(fit)
bn.fit.histogram(fit)
pdag = iamb(learning.test)
dag = set.arc(pdag,from="A",to="B")
fit = bn.fit(dag,learning.test,method="bayes")
fit
head(gaussina.test)
head(gaussian.test)
?break
?cut
gaussian.test$G_bin<-cut(gaussian.test$G,4)
head(gaussian.test)
gt<-gaussian.test
gt[,-c("G")]
gt[,-7]
head(gt[,-7])
gt<-gt[,-7]
pdag<-iamb(gt)
graphviz.plot(pdag)
dag = set.arc(pdag,"D","B")
fit = bn.fit(dag,gaussian.test)
fit = bn.fit(dag,gt)
plot(dag)
bn.fit(dag,gt)
dag
pdag<-hc(gt)
plot(pdag)
bn.fit(pdag,gt)
?bn.fit
str(gt)
?custom.fit
data(learning.test)
head(learning.test)
res = gs(learning.test)
plot(res)
res = set.arc(res,"A","B")
fitted = bn.fit(res,learning.test)
fitted
bn.fit.barchart(fitted$A)
bn.fit.barchart(fitted$B)
fitted$A
fitted$B
new.cpt=matrix(c(0.1,0.2,0.3,0.2,0.5,0.6,0.7,0.3,0.1),byrow=TRUE,ncol=3,dimnames=list(B=c("a","b","c"),A=c("a","b","c")))
new.cpt
fitted$B<-as.table(new.cpt)
all.equal(res,bn.net(fitted))
res=hc(gaussian.test)
fitted = bn.fit(res,gaussian.test)
res
head(gaussian.test)
require(Rgraphviz)
require(bnlearn)
data(learning.test)
head(learning.test)
res = gs(learning.test)
plot(res)
res = set.arc(res,"A","B")
fitted = bn.fit(res,learning.test)
fitted$B
new.cpt = matrix(c(0.1, 0.2, 0.3, 0.2, 0.5, 0.6, 0.7, 0.3, 0.1),
byrow = TRUE, ncol = 3,
dimnames = list(B = c("a", "b", "c"), A = c("a", "b", "c")))
fitted$B=as.table(new.cpt)
fitted$B
all.equal(res,bn.net(fitted))
res = hc(gaussian.test)
fitted = bn.fit(res,gaussian.test)
fitted$F
head(gaussian.test)
fitted
plot(res)
res = gs(learning.test)
plot(res)
res = set.arc(res,"A","B")
plot(res)
fitted = bn.fit(res,learning.test)
fitted$B
fitted$F
res = hc(gaussian.test)
fitted = bn.fit(res,gaussian.test)
fitted$F = list(coef)
fitted$F = list(coef=c(1,2,3,4,5),sd=3)
fitted$F = lm(F~A+D+E+G,data=gaussian.test)
net = model2network("[A][B][C|A:B]")
cptA = matrix(c(0.4,0.6),ncol=2,dimnames=list(NULL,c("LOW","HIGH")))
cptB = matrix(c(0.8,0.2),ncol=2,dimnames=list(NULL,c("GOOD","BAD")))
cptC = c(0.5,0.5,0.4,0.6,0.3,0.7,0.2,0.8)
dim(cptC)=c(2,2,2)
dimnames(cptC)=list("C"=c("TRUE","FALSE"),"A"=c("LOW","HIGH"),"B"=c("GOOD","BAD"))
cfit=custom.fit(net,dist=list(A=cptA,B=cptB,C=cptC))
cfit
cfit=custom.fit(net,dist=list(A=cptA,B=cptB,C=cptC),ordinal=c("A","B"))
distA=list(coef=c("Intercept"=2),sd=1)
cfit=custom.fit(net,dist=list(A=distA,B=cptB,C=cptC),ordinal=c("A","B"))
distB=list(coef=c("Intercept"=1),sd=0.5)
distC=list(coef=c("Intercept"=0.5,"A"=0.75,"B"=1.32),sd=0.4)
cfit=custom.fit(net,dist=list(A=distA,B=distB,C=distC))
distA = list(coef = c("(Intercept)" = 2), sd = 1)
distB = list(coef = c("(Intercept)" = 1), sd = 1.5)
distC = list(coef = c("(Intercept)" = 0.5, "A" = 0.75, "B" = 1.32), sd = 0.4)
cfit = custom.fit(net, dist = list(A = distA, B = distB, C = distC))
cfit
cptA = matrix(c(0.4,0.6),ncol=2,dimnames=list(NULL,c("LOW","HIGH")))
distB = list(coef=c("(Intercept)"=1),sd=1.5)
distC=list(coef=matrix(c(1.2,2.3,3.4,4.5),ncol=2,dimnames=list(c("Intercept","B"),NULL)),sd=c(0.3,0.6))
distB
distC
cfit=custom.fit(net,dist=list(A=distA,B=distB,c=distC))
cfit=custom.fit(net,dist=list(A=distA,B=distB,C=distC))
cptA = matrix(c(0.4, 0.6), ncol = 2, dimnames = list(NULL, c("LOW", "HIGH")))
distB = list(coef = c("(Intercept)" = 1), sd = 1.5)
distC = list(coef = matrix(c(1.2, 2.3, 3.4, 4.5), ncol = 2,
dimnames = list(c("(Intercept)", "B"), NULL)),
sd = c(0.3, 0.6))
distC
cgfit = custom.fit(net, dist = list(A = cptA, B = distB, C = distC))
cgfit
cgfit
cpquery(net.data, (A=="LOW"), TRUE)
cpquery(cgfit, (A=="LOW"), TRUE)
cpquery(cgfit, (A=="HIGH"), TRUE)
cpquery(cgfit, (B==0), TRUE)
cpquery(cgfit, (B==2), TRUE)
?cpquery
cpdist(cgfit, (B==2), TRUE)
cpdist(cgfit, "B",(A=="LOW"))
distB
b<-cpdist(cgfit, "B",(A=="LOW"))
str(b)
head(b)
mean(b$B)
sd(b$B)
distC
c<-cpdist(cgfit, "C",(A=="LOW",B==0.9))
c<-cpdist(cgfit, "C",(A=="LOW",B=0.9))
c<-cpdist(cgfit, "C",c(A=="LOW",B==0.9))
c<-cpdist(cgfit, "C",(A=="LOW")&(B==0.9))
c
c<-cpdist(cgfit, "C",(A=="LOW")&((B>=0.9)&(B<=1.2)))
c
distC
c<-cpdist(cgfit, "C",(A=="LOW")&((B>=0.9)&(B<=1.1)))
c
distC
mean(c$C)
sd(c$C)
a<-cpdist(cgfit, "A",(B>=0.9)&(B<=1.1)&((C>=3.2)&(C<=3.8)))
a
table(a)
cpquery(cgfit, "A",(B>=0.9)&(B<=1.1)&((C>=3.2)&(C<=3.8)))
b1<-cpdist(cgfit, "B",(A=="LOW")&((C>=3.2)&(C<=3.8)))
b1
mean(b1$B)
sd(b1$B)
install.packages('knitr')
install.packages('Packrat')
install.packages('packrat')
mtcars %>% ggvis(x = ~wt) %>% layer_histograms(width = 1)
library(dplyr)
mtcars %>% ggvis(x = ~wt) %>% layer_histograms(width = 1)
library(ggvis)
mtcars %>% ggvis(x = ~wt) %>% layer_histograms(width = 1)
?cpdist
require(bnlearn)
?cpdist
require("shiny")
setwd("C:\\Projects\\BayesianNetwork\\Netscene")
require(bnlearn)
require(Rgraphviz)
require(vcd)
require(ggplot2)
require(stringr)
#include the definition of the class nodes
source("C:\\Projects\\BayesianNetwork\\Netscene\\GraphRiskNode_class_z.R")
namel<-function (vec){
tmp<-as.list(vec)
names(tmp)<-as.character(unlist(vec))
tmp
}
pn<-{}
nodes<-{}
#yn   <- c(0,1)
#decl <- seq(0.1,1.1,1)
#dech <- seq(0.1,1.1,1)
EEselNode<-1
evi_list <<- list()
####old network starts here###
####specify the node configure
#hpi_model <- matrix(c(0.4, 0.6), ncol = 2, dimnames = list(NULL, c("LOW", "HIGH")))
#ltv_model <- list(coef = c("(Intercept)" = 2), sd = 1)
#dtv_model <- list(coef = matrix(c(1.2, 2.3, 3.4, 4.5), ncol = 2,
#                              dimnames = list(c("(Intercept)", "ltv"), NULL)),
#                sd = c(0.3, 0.6))
#vintage_model <- list(coef=c("(Intercept)"=3,"ltv"=1.6),sd=1.5)
#BoeIR_model <- matrix(c(0.5, 0.5), ncol = 2, dimnames = list(NULL, c("LOW", "HIGH")))
#IntGearing_model <- list(coef = matrix(c(-1.2, 1.1, 2, 2.6), ncol = 2,
#                              dimnames = list(c("(Intercept)", "BoeIR"), NULL)),
#                sd = c(0.13, 0.36))
#Unemp_model <- list(coef=c("(Intercept)"=0.5),sd=0.3)
#exog_model <- list(coef=c("(Intercept)"=3,"Unemp"=1.6,"IntGearing"=-0.6),sd=1.5)
#maturity_model <- matrix(c(0.7, 0.3), ncol = 2, dimnames = list(NULL, c("LOW", "HIGH")))
#DefRate_model <- list(coef = matrix(c(-1.2, 1.1, 2, -2.6), ncol = 2,
#                                  dimnames = list(c("(Intercept)", "maturity"), NULL)),
#                    sd = c(0.13, 0.36))
####note for 2 discrete nodes, we need to use 8 parameters(4 can be derived from another four)####
####wrap node configure into GRNode class, GRNode_d is for discrete node and GRNode_c is for continous node, parents,children here works
####as place holder
##hpi <- new("GRNode_d",name="hpi",model=list(model=hpi_model),values=c("LOW", "HIGH"),parents=c(NA,NA),children=c(NA,NA))
#hpi <- new("GRNode_d",name="hpi",model=list(model=hpi_model),values=colnames(hpi_model),parents=c(NA,NA),children=c(NA,NA))
#ltv <- new("GRNode_c",name="ltv",model=list(model=ltv_model),values=c(-10000,10000),parents=c(NA,NA),children=c(NA,NA))
#dtv <- new("GRNode_c",name="dtv",model=list(model=dtv_model),values=c(-10000,10000),parents=c(NA,NA),children=c(NA,NA))
#vintage <- new("GRNode_c",name="vintage",model=list(model=vintage_model),values=c(-10000,10000),parents=c(NA,NA),children=c(NA,NA))
##BoeIR <- new("GRNode_d",name="BoeIR",model=list(model=BoeIR_model),values=c("LOW", "HIGH"),parents=c(NA,NA),children=c(NA,NA))
#BoeIR <- new("GRNode_d",name="BoeIR",model=list(model=BoeIR_model),values=colnames(BoeIR_model),parents=c(NA,NA),children=c(NA,NA))
#IntGearing <- new("GRNode_c",name="IntGearing",model=list(model=IntGearing_model),values=c(-10000,10000),parents=c(NA,NA),children=c(NA,NA))
#Unemp <- new("GRNode_c",name="Unemp",model=list(model=Unemp_model),values=c(0,1),parents=c(NA,NA),children=c(NA,NA))
#exog <- new("GRNode_c",name="exog",model=list(model=exog_model),values=c(-10000,10000),parents=c(NA,NA),children=c(NA,NA))
##maturity <- new("GRNode_d",name="maturity",model=list(model=maturity_model),values=c("YES","NO"),parents=c(NA,NA),children=c(NA,NA))
#maturity <- new("GRNode_d",name="maturity",model=list(model=maturity_model),values=colnames(maturity_model),parents=c(NA,NA),children=c(NA,NA))
#DefRate <- new("GRNode_c",name="DefRate",model=list(model=DefRate_model),values=c(0,1),parents=c(NA,NA),children=c(NA,NA))
###How to setup the model structure.
#networkstring <- "[hpi][ltv][dtv|hpi:ltv][vintage|ltv][BoeIR][IntGearing|BoeIR:ltv][Unemp][exog|Unemp:IntGearing][maturity][DefRate|maturity:exog]"
###old network ends here###
###specify the node configure
#hpi_model <- matrix(c(0.4, 0.6), ncol = 2, dimnames = list(NULL, c("LOW", "HIGH")))
Income_1_model <- list(coef = c("(Intercept)" = 2), sd = 1)
Inflation_1_model <- list(coef=c("(Intercept)"=3,"Income_1"=2),sd=1.5)
BoERates_1_model <- list(coef=c("(Intercept)"=3,"Income_1"=-11.6,"Inflation_1"=2.6),sd=1.5)
DTI_1_model <- list(coef=c("(Intercept)"=3,"BoERates_1"=1.6,"Income_1"=-0.6),sd=1.5)
LTV_1_model <- list(coef = c("(Intercept)" = 8), sd = 1)
Spread_1_model <- list(coef=c("(Intercept)" = 2), sd = 1)
Defaults_1_model <- list(coef=c("(Intercept)"=3,"DTI_1"=1.6,"LTV_1"=-0.6,"Spread_1"=2.2),sd=1.5)
Income_2_model <- list(coef=c("(Intercept)"=3,"BoERates_1"=2),sd=1.5)
Inflation_2_model <- list(coef=c("(Intercept)"=3,"Income_2"=2),sd=1.5)
BoERates_2_model <- list(coef=c("(Intercept)"=3,"Income_2"=1.6,"Inflation_2"=-0.6),sd=1.5)
DTI_2_model <- list(coef=c("(Intercept)"=3,"BoERates_2"=1.6,"Income_2"=-0.6),sd=1.5)
LTV_2_model <- list(coef = c("(Intercept)" = 8), sd = 1)
Spread_2_model <- list(coef=c("(Intercept)" = 2), sd = 1)
Defaults_2_model <- list(coef=c("(Intercept)"=3,"DTI_2"=1.6,"LTV_2"=-0.6,"Spread_2"=2.2),sd=1.5)
###note for 2 discrete nodes, we need to use 8 parameters(4 can be derived from another four)###
###wrap node configure into GRNode class, GRNode_d is for discrete node and GRNode_c is for continous node, parents,children here works
###as place holder
#hpi <- new("GRNode_d",name="hpi",model=list(model=hpi_model),values=c("LOW", "HIGH"),parents=c(NA,NA),children=c(NA,NA))
Income_1 <- new("GRNode_c",name="Income_1",model=list(model=Income_1_model),values=c(-10000,10000),parents=c(NA,NA),children=c(NA,NA))
Inflation_1 <- new("GRNode_c",name="Inflation_1",model=list(model=Inflation_1_model),values=c(-10000,10000),parents=c(NA,NA),children=c(NA,NA))
BoERates_1 <- new("GRNode_c",name="BoERates_1",model=list(model=BoERates_1_model),values=c(-10000,10000),parents=c(NA,NA),children=c(NA,NA))
DTI_1 <- new("GRNode_c",name="DTI_1",model=list(model=DTI_1_model),values=c(-10000,10000),parents=c(NA,NA),children=c(NA,NA))
LTV_1 <- new("GRNode_c",name="LTV_1",model=list(model=LTV_1_model),values=c(-10000,10000),parents=c(NA,NA),children=c(NA,NA))
Spread_1 <- new("GRNode_c",name="Spread_1",model=list(model=Spread_1_model),values=c(-10000,10000),parents=c(NA,NA),children=c(NA,NA))
Defaults_1 <- new("GRNode_c",name="Defaults_1",model=list(model=Defaults_1_model),values=c(-10000,10000),parents=c(NA,NA),children=c(NA,NA))
Income_2 <- new("GRNode_c",name="Income_2",model=list(model=Income_2_model),values=c(-10000,10000),parents=c(NA,NA),children=c(NA,NA))
Inflation_2 <- new("GRNode_c",name="Inflation_2",model=list(model=Inflation_2_model),values=c(-10000,10000),parents=c(NA,NA),children=c(NA,NA))
BoERates_2 <- new("GRNode_c",name="BoERates_2",model=list(model=BoERates_2_model),values=c(-10000,10000),parents=c(NA,NA),children=c(NA,NA))
DTI_2 <- new("GRNode_c",name="DTI_2",model=list(model=DTI_2_model),values=c(-10000,10000),parents=c(NA,NA),children=c(NA,NA))
LTV_2 <- new("GRNode_c",name="LTV_2",model=list(model=LTV_2_model),values=c(-10000,10000),parents=c(NA,NA),children=c(NA,NA))
Spread_2 <- new("GRNode_c",name="Spread_2",model=list(model=Spread_2_model),values=c(-10000,10000),parents=c(NA,NA),children=c(NA,NA))
Defaults_2 <- new("GRNode_c",name="Defaults_2",model=list(model=Defaults_2_model),values=c(-10000,10000),parents=c(NA,NA),children=c(NA,NA))
networkstring <- "[Spread_1][LTV_1][Income_1][Inflation_1|Income_1][BoERates_1|Inflation_1:Income_1][DTI_1|Income_1:BoERates_1][Defaults_1|DTI_1:LTV_1:Spread_1]
[Income_2|BoERates_1][Inflation_2|Income_2][BoERates_2|Inflation_2:Income_2][DTI_2|Income_2:BoERates_2][Spread_2][LTV_2][Defaults_2|DTI_2:LTV_2:Spread_2]"
net <- model2network(networkstring)
###put all the GRNode into one list
nnodes <- list(Income_1,Inflation_1,BoERates_1,DTI_1,Spread_1,LTV_1,Defaults_1,Income_2,Inflation_2,BoERates_2,DTI_2,Spread_2,LTV_2,Defaults_2)
print(paste('nodes length is ',length(nnodes)))
###build the network###
cgfit <- fit.net.z(nnodes,net)
###get all names for every node###
node_names <- get.name(nnodes)
print(paste0('the name of list from get name method is ',node_names))
###query the network###
#cpquery(cgfit, (maturity=="YES"), TRUE)
#bin=0.1
#b<-cpdist(cgfit, "DefRate",(maturity=="NO")&(Unemp>0.1)&(Unemp<0.12))
#plot(density(b$DefRate))
#mean(b$DefRate)
## [1] -22.44305
#plot(density(b$DefRate))
ddd<-rbn(cgfit,n=2000)
graphviz.plot(net,shape='ellipse')
cpquery(cgfit,"DTI_2",Defaults_2>10)
cpquery(cgfit,DTI_2,Defaults_2>10)
cpquery(cgfit,DTI_2=T,Defaults_2>10)
cpquery(cgfit,event = DTI_2>3,evidence=Defaults_2>10)
cpquery(cgfit,event = DTI_2>3,evidence=Defaults_2>10)
cpquery(cgfit,event = DTI_2>3,evidence=Defaults_2>10)
cpquery(cgfit,event = DTI_2>3,evidence=Defaults_2>10)
cpquery(cgfit,event = DTI_2>3,evidence=Defaults_2>10)
cpquery(cgfit,event = DTI_2>3,evidence=Defaults_2>10)
cpquery(cgfit,event = DTI_2>3,evidence=Defaults_2>10)
cpquery(cgfit,event = DTI_2>3,evidence=Defaults_2>10)
cpquery(cgfit,event = DTI_2>3,evidence=Defaults_2>10)
cpquery(cgfit,event = DTI_2>3,evidence=Defaults_2>10)
cpquery(cgfit,event = DTI_2>3,evidence=Defaults_2>10)
cpquery(cgfit,event = DTI_2>3,evidence=Defaults_2>10)
cpquery(cgfit,event = DTI_2>3,evidence=Defaults_2>10)
cpquery(cgfit,event = DTI_2>3,evidence=Defaults_2>10)
bb<-cpdist(cgfit,event = DTI_2>3,evidence=Defaults_2>10)
bb<-cpdist(cgfit,event = DTI_2,evidence=Defaults_2>10)
bb<-cpdist(cgfit,"DTI_2",evidence=Defaults_2>10)
head(bb)
mean(bb$DTI_2>3)
mean(bb$DTI_2>3)
bb<-cpdist(cgfit,"DTI_2",evidence=Defaults_2>100)
cpquery(cgfit,event = DTI_2>3,evidence=Defaults_2>100)
cpquery(cgfit,event = DTI_2>3,evidence=Defaults_2>80)
cpquery(cgfit,event = DTI_2>3,evidence=Defaults_2>50)
cpquery(cgfit,event = DTI_2>3,evidence=Defaults_2>40)
cpquery(cgfit,event = DTI_2>3,evidence=Defaults_2>20)
cpquery(cgfit,event = DTI_2>3,evidence=Defaults_2>10)
cpquery(cgfit,event = DTI_2>3,evidence=Defaults_2<10)
cpquery(cgfit,event = DTI_2<3,evidence=Defaults_2<10)
b<-cpdist(cgfit,c("DTI_2","LTV_2","Spread_2","BoERates_2","Income_2","Inflation_2"),(Defaults_2>20))
head(b)
plot(b$DTI_2,b$LTV_2)
plot(density(b$DTI_2))
plot(density(b$LTV_2))
apply(b,1,mean)
apply(b,2,mean)
b<-cpdist(cgfit,c("DTI_2","LTV_2","Spread_2","BoERates_2","Income_2","Inflation_2"),(Defaults_2>10))
apply(b,2,mean)
b<-cpdist(cgfit,c("DTI_2","LTV_2","Spread_2","BoERates_2","Income_2","Inflation_2"),(Defaults_2>30))
apply(b,2,mean)
cgfit
graphviz.plot(net)
graphviz.plot(net,shape='ellipse')
cgfit$Defaults_2
class(cgfit$Defaults_2)
typeof(cgfit$Defaults_2)
str(cgfit$Defaults_2)
cgfit$Defaults_2$parents
cgfit$LTV_2$parents
pnodes<-vector
pnodes<-vector()
pnodes
pnodes<-cgfit[['LTV_2']]$parents
pnodes
pnodes<-cgfit[['Defaults_2']]$parents
pnodes
get.parents.by.childname=function(child){
pnodes <-vector()
pnodes <- cgfit[[child]]$parents
}
get.parents.by.childname('Default2_2')
get.parents.by.childname('Defaults_2')
get.parents.by.childname=function(child){
pnodes <-vector()
pnodes <- cgfit[[child]]$parents
pnodes
}
get.parents.by.childname('Defaults_2')
cpdist(cgfit,get.parents.by.childname('Defaults_2'),Defaults_2>20)
lay1<-cpdist(cgfit,get.parents.by.childname('Defaults_2'),Defaults_2>20)
head(lay1)
range(lay1[,1])
range(lay1[,2])
range(lay1[,3])
?cut
diff(range(lay1[,2]))
(diff(range(lay1[,2]))/10)>1
(diff(range(lay1[,1]))/10)>1
diff(range(lay1[,1]))
round(diff(range(lay1[,1])),0)
lapply(lay1,function(x) cut(x,ifelse((diff(range(lay1[,1]))/10)>1,round(diff(range(lay1[,1])),0),10)))
lay11<-lapply(lay1,function(x) cut(x,ifelse((diff(range(lay1[,1]))/10)>1,round(diff(range(lay1[,1])),0),10)))
lay11<-as.data.frame(lay11)
lay11
table(lay11[,1])
table(lay11)
head(lay11)
b_bin_df<-lay11
orders.plot<-data.frame()
for(i in 2:ncol(b_bin_df)){
ord.cache<-b_bin_df %>%
group_by(b_bin_df[,i-1],b_bin_df[,i]) %>%
summarise(n=n())
colnames(ord.cache)[1:2]<-c('from','to')
ord.cache$from<-paste(ord.cache$from,'(',colnames(b_bin_df)[i-1],')',sep='')
ord.cache$to<-paste(ord.cache$to,'(',colnames(b_bin_df)[i],')',sep='')
orders.plot<-rbind(orders.plot,ord.cache)
}
require(dplyr)
b_bin_df<-lay11
orders.plot<-data.frame()
for(i in 2:ncol(b_bin_df)){
ord.cache<-b_bin_df %>%
group_by(b_bin_df[,i-1],b_bin_df[,i]) %>%
summarise(n=n())
colnames(ord.cache)[1:2]<-c('from','to')
ord.cache$from<-paste(ord.cache$from,'(',colnames(b_bin_df)[i-1],')',sep='')
ord.cache$to<-paste(ord.cache$to,'(',colnames(b_bin_df)[i],')',sep='')
orders.plot<-rbind(orders.plot,ord.cache)
}
plot(gvisSankey(orders.plot,from="from",to="to",weight='n',options=list(height=900,width=1800,sankey="{link:{color:{fill:'lightblue'}}}")))
library('googleVis')
library(dplyr)
library(reshape2)
plot(gvisSankey(orders.plot,from="from",to="to",weight='n',options=list(height=900,width=1800,sankey="{link:{color:{fill:'lightblue'}}}")))
table(lay11)
a<-table(lay11)
which.max(a)
a[762]
names(a[762])
name(a[762])
str(a)
dimnames(a[762])
getMethod(a)
class(a)
names(a)
rownames(a)
attr(a)
?attr
attr(a,'DTI_2')
attr(a[762],'DTI_2')
as.data.frame(a)
lay11.count<-as.data.frame(table(lay11))
head(lay11.count)
lay11.oount[which.max(lay11.count$Freq)]
lay11.count[which.max(lay11.count$Freq)]
lay11.count[which.max(lay11.count$Freq),]
d<-as.Date('2014-10-12')
d
d+90
d+120
lay11.count[760:770,]
lay11.count[which.max(lay11.count$Freq),]
cc<-lay11.count[which.max(lay11.count$Freq),]
cc
cc[1]
class(cc[1])
class(cc[1],drop=TRUE)
cc[[1]
]
val<-as.character(cc[[1]])
val
val = gsub("(","",val)
val = gsub("]","",val)
val = gsub("\(","",val)
val = gsub("]","",val)
val
?gsub
val = gsub("\(","",val,fix=TRUE)
val = gsub("(","",val,fix=TRUE)
val
require(stringr)
str_split(val,',')
val<-str_split(val,',')
val
lapply(val,function(x) as.numeric)
lapply(val,function(x) as.numeric())
as.numeric("2.03")
as.numeric(val)
val
cc<-lay11.count[which.max(lay11.count$Freq),]
val<-cc
val
val<-cc[1]
val = as.character(val)
val
cc<-lay11.count[which.max(lay11.count$Freq),]
cc
cc[1]
val<-cc[1]
val
val = as.character(val)
val
val<-cc[1]
val[1]
val[1,1]
val = as.character(val[1,1])
val
val = gsub("(","",val,fix=TRUE)
val = gsub("]","",val,fix=TRUE)
val = unlist(str_split(val,','))
= unlist(str_split(val,','))
val
val = as.numeric(val)
val
cc[1]
cc[2]
cc[2][1,1]
require('devtools')
devtools::install_github('ramnathv/htmlwidgets')
b<-cpdist(cgfit,c("DTI_2","LTV_2","Spread_2","BoERates_2","Income_2","Inflation_2"),(Defaults_2>20))
ccc<-table(b)
lay1<-b
lay11<-lapply(lay1,function(x) cut(x,ifelse((diff(range(lay1[,1]))/10)>1,round(diff(range(lay1[,1])),0),10)))
lay11<-as.data.frame(lay11)
lay11.count<-as.data.frame(table(lay11))
cc<-lay11.count[which.max(lay11.count$Freq),]
cc
