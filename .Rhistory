i<-1
seed_node <- inference_from_child_bak[[i]]
for(i in 1:length(inference_from_child)){#update the candidate list pool to remove the selected node.
if(inference_from_child[[i]]==seed_node){
inference_from_child[[i]] <- NULL
}
}
inference_from_child
parents <- child_parents_list[[seed_node]]
interested_parents <- parents
interested_parents
result_bin_df <- result_bin_df_full
!all(parents %in% visit_list)
for(p in parents){
if(p %in% visit_list){
interested_parents <- interested_parents[!interested_parents %in% p]#if parent is in visited list, add it to constraints and remove from interested parents node
print(p)
result_bin_df <- subset(result_bin_df,result_bin_df[,p]==best_conf[[p]])
}
}
head(result_bin_df)
dim(result_bin_df)
seed_node
result_bin_df <- subset(result_bin_df,result_bin_df[,seed_node]==best_conf[[seed_node]])##this can be problematic
head(result_bin_df)
best_conf
visit_list<-list()
best_conf<-list()
inference_from_child <- list()
evi_string <- paste0('(',target,'>',minV,'&',target,'<',maxV,')')
querynodes <- paste(allButOne,collapse = '","')
eval_string <- paste0('cpdist(cgfit,c("',querynodes,'"),',evi_string,')')
print('in best conf')
print(eval_string)
result <- eval(parse(text=eval_string))
print(head(result))
result_bin<<-lapply(result[,colnames(result) %in% get.parents.by.childname(target)],function(x) cut(x,ifelse((diff(range(x))/10)>1,round(diff(range(x)),0),10)))
result_bin_full<-lapply(result,function(x) cut(x,ifelse((diff(range(x))/10)>1,round(diff(range(x)),0),10)))
result_bin_df_full <- as.data.frame(result_bin_full)
result_bin_df <- result_bin_df_full
result_bin_df <- result_bin_df[,colnames(result_bin_df) %in% get.parents.by.childname(target)]
result_count_df <- as.data.frame(table(result_bin_df))
print(head(result_count_df))
bestConfName <- colnames(result_bin_df)
bestSet <- result_count_df[which.max(result_count_df$Freq),]
for(i in bestConfName){
if(i!='Freq'&&!(i %in% visit_list)){
visit_list[[length(visit_list)+1]] <- i
#			best_conf[[length(best_conf)+1]] <- as.character(bestSet[[i]])
best_conf[[i]] <- as.character(bestSet[[i]])
parents <- get.parents.by.childname(i)
if(length(parents)>0){
inference_from_child[[length(inference_from_child)+1]] <- i ##the next search start from i
}
}
}#
best_conf
total <- 0
inference_from_child
inference_from_child_bak <- inference_from_child##copy by value, not reference???
i
i<-1
seed_node <- inference_from_child_bak[[i]]
seed_node
inference_from_child_bak
i
seed_node <- inference_from_child_bak[[i]]
for(i in 1:length(inference_from_child)){#update the candidate list pool to remove the selected node.
if(inference_from_child[[i]]==seed_node){
inference_from_child[[i]] <- NULL
}
}
inference_from_child
parents <- child_parents_list[[seed_node]]
parents
interested_parents <- parents
result_bin_df <- result_bin_df_full
!all(parents %in% visit_list)
for(p in parents){
if(p %in% visit_list){
interested_parents <- interested_parents[!interested_parents %in% p]#if parent is in visited list, add it to constraints and remove from interested parents node
print(p)
result_bin_df <- subset(result_bin_df,result_bin_df[,p]==best_conf[[p]])
}
}
best_conf
result_bin_df <- subset(result_bin_df,result_bin_df[,seed_node]==best_conf[[seed_node]])##this can be problematic
head(result_bin_df)
table(result_bin_df$DTI_2)
result_bin_df <- subset(result_bin_df,select = interested_parents)#result_bin_df[,interested_parents] it drop the data frame format
head(result_bin_df)
result_count_df <- as.data.frame(table(result_bin_df))
result_count_df
bestConfName <- colnames(result_bin_df)
bestConfName
bestSet <- result_count_df[which.max(result_count_df$Freq),]
bestSet
for(j in bestConfName) print(j)
j<-"BoERates_2"
if(j!='Freq'&&!(j %in% visit_list)){
visit_list[[length(visit_list)+1]] <- j
#				best_conf[[length(best_conf)+1]] <- as.character(bestSet[[i]])
best_conf[[j]] <- as.character(bestSet[[j]])
parents <- get.parents.by.childname(j)
if(length(parents)>0&&!all(parents %in% visit_list)){
inference_from_child[[length(inference_from_child)+1]] <- j ##the next search start from j
}
}
best_conf
bestSet
inference_from_child
j<-"Income_2"
if(j!='Freq'&&!(j %in% visit_list)){
visit_list[[length(visit_list)+1]] <- j
#				best_conf[[length(best_conf)+1]] <- as.character(bestSet[[i]])
best_conf[[j]] <- as.character(bestSet[[j]])
parents <- get.parents.by.childname(j)
if(length(parents)>0&&!all(parents %in% visit_list)){
inference_from_child[[length(inference_from_child)+1]] <- j ##the next search start from j
}
}
best_conf
inference_from_child
inference_from_child_bak <- inference_from_child##copy by value, not reference???
i
seed_node <- inference_from_child_bak[[i]]
seed_node
inference_from_child
for(i in 1:length(inference_from_child)){#update the candidate list pool to remove the selected node.
if(inference_from_child[[i]]==seed_node){
inference_from_child[[i]] <- NULL
}
}
inference_from_child
inference_from_child[[2]]<-"BoERates_2"
inference_from_child
remove_index <- -1
remove_index
for(i in 1:length(inference_from_child)){#update the candidate list pool to remove the selected node.
if(inference_from_child[[i]]==seed_node){
remove_index <- i
}
}
if(remove_index>0){
inference_from_child[[remove_index]] <- NULL
}
inference_from_child
seed_node
parents <- child_parents_list[[seed_node]]
interested_parents <- parents
interested_parents
result_bin_df <- result_bin_df_full
!all(parents %in% visit_list)
p<-"Income_2"
p %in% visit_list
interested_parents <- interested_parents[!interested_parents %in% p]#if parent is in visited list, add it to constraints and remove from interested parents node
interested_parents
result_bin_df <- subset(result_bin_df,result_bin_df[,p]==best_conf[[p]])
head(result_bin_df)
dim(result_bin_df)
result_bin_df <- result_bin_df_full
dim(result_bin_df)
table(result_bin_df$Income_2)
p
interested_parents <- interested_parents[!interested_parents %in% p]#if parent is in visited list, add it to constraints and remove from interested parents node
print(p)
result_bin_df <- subset(result_bin_df,result_bin_df[,p]==best_conf[[p]])
seed_node
result_bin_df <- subset(result_bin_df,result_bin_df[,seed_node]==best_conf[[seed_node]])##this can be problematic
head(result_bin_df)
dim(result_bin_df)
result_bin_df <- subset(result_bin_df,select = interested_parents)#result_bin_df[,interested_parents] it drop the data frame format
result_count_df <- as.data.frame(table(result_bin_df))
head(result_count_df)
bestConfName <- colnames(result_bin_df)
bestConfName
bestSet <- result_count_df[which.max(result_count_df$Freq),]
bestSet
visit_list
j<-"Inflation_2"
visit_list[[length(visit_list)+1]] <- j
visit_list
best_conf[[j]] <- as.character(bestSet[[j]])
best_conf
bestSet
is.null(bestSet[[j]])
j
bestSet[,index]
bestSet[,1]
as.character(bestSet[,1])
head(result_bin_df)
result_count_df <- as.data.frame(table(result_bin_df))
head(result_count_df)
result_count_df <- as.data.frame(table(result_bin_df[,]))
head(result_count_df)
result_count_df <- as.data.frame(table(result_bin_df))
head(result_bin_df)
class(result_bin_df)
result_count_df_2 <- as.data.frame(table(result_bin_df_full[,1:2]))
head(result_count_df_2)
best_conf
index <- 1
!is.null(bestSet[j])
j
bestSet
!is.null(bestSet[[j]])
bestSet[[j]]
if(!is.null(bestSet[[j]])){#2 or more ways table
best_conf[[j]] <- as.character(bestSet[[j]])
}else{#1 way table
best_conf[[j]] <- as.character(bestSet[,index])
index <- index + 1
}
best_conf
inference_from_child
parents <- get.parents.by.childname(j)
if(length(parents)>0&&!all(parents %in% visit_list)){
inference_from_child[[length(inference_from_child)+1]] <- j ##the next search start from j
}
}
inference_from_child
i
seed_node
seed_node
inference_from_child_bak
inference_from_child
ii<-2
seed_node <- inference_from_child_bak[[ii]]
seed_node
remove_index <- -1
for(i in 1:length(inference_from_child)){#update the candidate list pool to remove the selected node.
if(inference_from_child[[i]]==seed_node){
remove_index <- i
}
}
remove_index
if(remove_index>0){
inference_from_child[[remove_index]] <- NULL
}
inference_from_child
seed_node
parents <- child_parents_list[[seed_node]]
parents
interested_parents <- parents
result_bin_df <- result_bin_df_full
!all(parents %in% visit_list)
p<-"BoERates_1"
p %in% visit_list
visit_list
p
seed_node
best_conf[[seed_node]
]
best_conf
result_bin_df <- subset(result_bin_df,result_bin_df[,seed_node]==best_conf[[seed_node]])##this can be problematic
dim(result_bin_df)
seed_node
table(result_bin_df_full$Income_2)
interested_parents
result_bin_df <- subset(result_bin_df,select = interested_parents)#result_bin_df[,interested_parents] it drop the data frame format
result_count_df <- as.data.frame(table(result_bin_df))
bestConfName <- colnames(result_bin_df)
bestConfName
bestSet <- result_count_df[which.max(result_count_df$Freq),]
bestSet
j<-"BoERates_1"
j %in% visit_list
visit_list[[length(visit_list)+1]] <- j
visit_list
if(!is.null(bestSet[[j]])){#2 or more ways table
best_conf[[j]] <- as.character(bestSet[[j]])
}else{#1 way table
best_conf[[j]] <- as.character(bestSet[,index])
index <- index + 1
}
best_conf
bestSet
index
index <- 1
if(j!='Freq'&&!(j %in% visit_list)){
visit_list[[length(visit_list)+1]] <- j
#				best_conf[[length(best_conf)+1]] <- as.character(bestSet[[i]])
if(!is.null(bestSet[[j]])){#2 or more ways table
best_conf[[j]] <- as.character(bestSet[[j]])
}else{#1 way table
best_conf[[j]] <- as.character(bestSet[,index])
index <- index + 1
}
parents <- get.parents.by.childname(j)
if(length(parents)>0&&!all(parents %in% visit_list)){
inference_from_child[[length(inference_from_child)+1]] <- j ##the next search start from j
}
}
best_conf
index
!is.null(bestSet[[j]])
as.character(bestSet[,index])
best_conf
best_conf[[j]]
best_conf[[j]] <- as.character(bestSet[,index])
best_conf
inference_from_child
j
parents <- get.parents.by.childname(j)
parents
if(length(parents)>0&&!all(parents %in% visit_list)){
inference_from_child[[length(inference_from_child)+1]] <- j ##the next search start from j
}
inference_from_child
child_parents_list
visit_list<-list()
best_conf<-list()
inference_from_child <- list()
evi_string <- paste0('(',target,'>',minV,'&',target,'<',maxV,')')
querynodes <- paste(allButOne,collapse = '","')
#	querynodes <- get.parents.by.childname(input$TargetNode)
#	querynodes <- paste(querynodes,collapse = '","')
#	querynodes <- paste0('c("',querynodes,'")')
eval_string <- paste0('cpdist(cgfit,c("',querynodes,'"),',evi_string,')')
print('in best conf')
print(eval_string)
result <- eval(parse(text=eval_string))
print(head(result))
#   discretize the parents node for plotting purpose
result_bin<<-lapply(result[,colnames(result) %in% get.parents.by.childname(target)],function(x) cut(x,ifelse((diff(range(x))/10)>1,round(diff(range(x)),0),10)))
#   discretize the all nodes for test purpose
result_bin_full<-lapply(result,function(x) cut(x,ifelse((diff(range(x))/10)>1,round(diff(range(x)),0),10)))
result_bin_df_full <- as.data.frame(result_bin_full)
#   First get the parents node bin distribution
result_bin_df <- result_bin_df_full
result_bin_df <- result_bin_df[,colnames(result_bin_df) %in% get.parents.by.childname(target)]
#	result_count_df <- as.data.frame(table(result_bin)) Do try to run the following code, machine will crashed!
result_count_df <- as.data.frame(table(result_bin_df))
print(head(result_count_df))
bestConfName <- colnames(result_bin_df)
bestSet <- result_count_df[which.max(result_count_df$Freq),]
#   store the visit_list and best configuration for the visit_list
for(i in bestConfName){
if(i!='Freq'&&!(i %in% visit_list)){
visit_list[[length(visit_list)+1]] <- i
#			best_conf[[length(best_conf)+1]] <- as.character(bestSet[[i]])
best_conf[[i]] <- as.character(bestSet[[i]])
parents <- get.parents.by.childname(i)
if(length(parents)>0){
inference_from_child[[length(inference_from_child)+1]] <- i ##the next search start from i
}
}
}#
total <- 0
while(length(visit_list)<length(allButOne)&&total<10){#if we have not go through all nodes and we got some child nodes.
inference_from_child_bak <- inference_from_child##copy by value, not reference???
print(inference_from_child)
print('*****************')
for(ii in 1:length(inference_from_child_bak)){#get a candidate node
seed_node <- inference_from_child_bak[[ii]]
print(paste0('@@@ processing seed node :',seed_node))
remove_index <- -1
for(i in 1:length(inference_from_child)){#update the candidate list pool to remove the selected node.
if(inference_from_child[[i]]==seed_node){
remove_index <- i
}
}
if(remove_index>0){
inference_from_child[[remove_index]] <- NULL
}
parents <- child_parents_list[[seed_node]]
interested_parents <- parents
result_bin_df <- result_bin_df_full
if(!all(parents %in% visit_list)){
for(p in parents){
if(p %in% visit_list){
interested_parents <- interested_parents[!interested_parents %in% p]#if parent is in visited list, add it to constraints and remove from interested parents node
print(p)
result_bin_df <- subset(result_bin_df,result_bin_df[,p]==best_conf[[p]])
}
}
result_bin_df <- subset(result_bin_df,result_bin_df[,seed_node]==best_conf[[seed_node]])##this can be problematic
result_bin_df <- subset(result_bin_df,select = interested_parents)#result_bin_df[,interested_parents] it drop the data frame format
print(paste0('$$$ inference parent nodes:',as.character(interested_parents)))
result_count_df <- as.data.frame(table(result_bin_df))
bestConfName <- colnames(result_bin_df)
bestSet <- result_count_df[which.max(result_count_df$Freq),]
index <- 1
for(j in bestConfName){
if(j!='Freq'&&!(j %in% visit_list)){
visit_list[[length(visit_list)+1]] <- j
#				best_conf[[length(best_conf)+1]] <- as.character(bestSet[[i]])
if(!is.null(bestSet[[j]])){#2 or more ways table
best_conf[[j]] <- as.character(bestSet[[j]])
}else{#1 way table
best_conf[[j]] <- as.character(bestSet[,index])
index <- index + 1
}
parents <- get.parents.by.childname(j)
if(length(parents)>0&&!all(parents %in% visit_list)){
inference_from_child[[length(inference_from_child)+1]] <- j ##the next search start from j
}
}
}
}
}
total <- total + 1
}
visit_list
best_conf
runApp()
visit_list<-list()
best_conf<-list()
inference_from_child <- list()
evi_string <- paste0('(',target,'>',minV,'&',target,'<',maxV,')')
querynodes <- paste(allButOne,collapse = '","')
#	querynodes <- get.parents.by.childname(input$TargetNode)
#	querynodes <- paste(querynodes,collapse = '","')
#	querynodes <- paste0('c("',querynodes,'")')
eval_string <- paste0('cpdist(cgfit,c("',querynodes,'"),',evi_string,')')
print('in best conf')
print(eval_string)
result <- eval(parse(text=eval_string))
print(head(result))
#   discretize the parents node for plotting purpose
result_bin<<-lapply(result[,colnames(result) %in% get.parents.by.childname(target)],function(x) cut(x,ifelse((diff(range(x))/10)>1,round(diff(range(x)),0),10)))
#   discretize the all nodes for test purpose
result_bin_full<-lapply(result,function(x) cut(x,ifelse((diff(range(x))/10)>1,round(diff(range(x)),0),10)))
result_bin_df_full <- as.data.frame(result_bin_full)
#   First get the parents node bin distribution
result_bin_df <- result_bin_df_full
result_bin_df <- result_bin_df[,colnames(result_bin_df) %in% get.parents.by.childname(target)]
#	result_count_df <- as.data.frame(table(result_bin)) Do try to run the following code, machine will crashed!
result_count_df <- as.data.frame(table(result_bin_df))
print(head(result_count_df))
bestConfName <- colnames(result_bin_df)
bestSet <- result_count_df[which.max(result_count_df$Freq),]
for(i in bestConfName){
if(i!='Freq'&&!(i %in% visit_list)){
visit_list[[length(visit_list)+1]] <- i
#			best_conf[[length(best_conf)+1]] <- as.character(bestSet[[i]])
best_conf[[i]] <- as.character(bestSet[[i]])
parents <- get.parents.by.childname(i)
if(length(parents)>0){
inference_from_child[[length(inference_from_child)+1]] <- i ##the next search start from i
}
}
}#
total <- 0
while(length(visit_list)<length(allButOne)&&total<10){#if we have not go through all nodes and we got some child nodes.
inference_from_child_bak <- inference_from_child##copy by value, not reference???
print(inference_from_child)
print('*****************')
for(ii in 1:length(inference_from_child_bak)){#get a candidate node
seed_node <- inference_from_child_bak[[ii]]
print(paste0('@@@ processing seed node :',seed_node))
remove_index <- -1
for(i in 1:length(inference_from_child)){#update the candidate list pool to remove the selected node.
if(inference_from_child[[i]]==seed_node){
remove_index <- i
}
}
if(remove_index>0){
inference_from_child[[remove_index]] <- NULL
}
parents <- child_parents_list[[seed_node]]
interested_parents <- parents
result_bin_df <- result_bin_df_full
if(!all(parents %in% visit_list)){
for(p in parents){
if(p %in% visit_list){
interested_parents <- interested_parents[!interested_parents %in% p]#if parent is in visited list, add it to constraints and remove from interested parents node
print(p)
result_bin_df <- subset(result_bin_df,result_bin_df[,p]==best_conf[[p]])
}
}
result_bin_df <- subset(result_bin_df,result_bin_df[,seed_node]==best_conf[[seed_node]])##this can be problematic
result_bin_df <- subset(result_bin_df,select = interested_parents)#result_bin_df[,interested_parents] it drop the data frame format
print(paste0('$$$ inference parent nodes:',as.character(interested_parents)))
result_count_df <- as.data.frame(table(result_bin_df))
bestConfName <- colnames(result_bin_df)
bestSet <- result_count_df[which.max(result_count_df$Freq),]
index <- 1
for(j in bestConfName){
if(j!='Freq'&&!(j %in% visit_list)){
visit_list[[length(visit_list)+1]] <- j
#				best_conf[[length(best_conf)+1]] <- as.character(bestSet[[i]])
if(!is.null(bestSet[[j]])){#2 or more ways table
best_conf[[j]] <- as.character(bestSet[[j]])
}else{#1 way table
best_conf[[j]] <- as.character(bestSet[,index])
index <- index + 1
}
parents <- get.parents.by.childname(j)
if(length(parents)>0&&!all(parents %in% visit_list)){
inference_from_child[[length(inference_from_child)+1]] <- j ##the next search start from j
}
}
}
}
}
total <- total + 1
}
best_conf
visit_list
for(vi in visit_list) print(vi)
get.children.by.parentname=function(parent){
children_nodes <-vector()
children_nodes <- cgfit[[parent]]$children
children_nodes
}
get.children.by.parentname('BoERates_1')
children<-get.children.by.parentname('BoERates_1')
!all(children %in% visit_list)
interested_children <- children
children[!(children %in% visit_list)]
runApp()
